# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# README documentation generated automatically from this file via https://github.com/norwoodj/helm-docs

# global -- for common values see https://github.com/Activiti/activiti-cloud-common-chart/blob/master/charts/common/README.md
global:
  # global.registryPullSecrets -- Configure pull secrets for all deployments
  registryPullSecrets:
    - quay-registry-secret
  gateway:
    # global.gateway.domain -- Set to configure gateway domain template, i.e. {{ .Release.Namespace }}.1.3.4.5.nip.io
    # $ helm upgrade aae . --install --set global.gateway.domain=1.2.3.4.nip.io
    domain: ""
    # global.gateway.host -- Set to configure single host domain name for all services, i.e. "{{ .Release.Namespace }}.{{ template "common.gateway-domain" . }}"
    host: '{{ template "common.gateway-domain" . }}'
    # global.gateway.http -- Set to false enables HTTPS configuration on all urls
    http: "false"
    # global.gateway.tlsacme -- Set to enable automatic TLS for ingress if https is enabled
    tlsacme: "false"
    # global.gateway.annotations -- Configure global annotations for all service ingresses
    annotations: {}
  keycloak:
    # global.keycloak.host -- Configure Keycloak host template, i.e. "{{ .Release.Namespace }}.{{ .Values.global.gateway.domain }}"
    host: '{{ template "common.gateway-host" . }}'
    # global.keycloak.url -- Set full url to configure external Keycloak, https://keycloak.mydomain.com/auth
    url: ""
    # global.keycloak.realm -- Configure Keycloak realm
    realm: alfresco
    # global.keycloak.resource -- Configure Keycloak resource
    resource: alfresco
    # global.keycloak.clientId -- Configure Activiti Keycloak Client Id
    clientId: activiti-keycloak
    # global.keycloak.clientSecret -- Configure Activiti Keycloak Client Secret.
    clientSecret: d2b835b5-efdf-4448-8d55-89eaaca9fc96
  acs:
    # global.acs.enabled -- enable support for ACS
    enabled: false
    # global.acs.host -- host for content services
    host: '{{ template "common.gateway-host" . }}'
    # global.acs.url -- set full url to configure external ACS, https://acs.mydomain.com without /alfresco
    url: ""
    # global.acs.admin -- admin credentials to setup required users/groups/acl on ACS
    admin:
      # global.acs.admin.username -- ACS admin username
      username: ""
      # global.acs.admin.password -- ACS admin password
      password: ""
    activemq:
      # global.acs.activemq.url -- ACS ActiveMQ URL for events
      url: ""
      # global.acs.activemq.username -- ACS ActiveMQ username
      username: ""
      # global.acs.activemq.username -- ACS ActiveMQ password
      password: ""
alfresco-identity-service:
  # set to false to disable custom alfresco-identity-service ingress with hostname support
  enabled: true
  rbac:
    create: false
  serviceAccount:
    create: false
  ingress:
    enabled: false
  keycloak:
    keycloak:
      image:
        tag: 1.6.0
    ingress:
      enabled: true
      rules:
        - host: '{{ include "common.keycloak-host" . }}'
          paths:
            - path: /auth
              pathType: Prefix
      tls: []
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
        nginx.ingress.kubernetes.io/affinity: cookie
        nginx.ingress.kubernetes.io/session-cookie-name: identity_affinity_route
        nginx.ingress.kubernetes.io/session-cookie-hash: sha1
        nginx.ingress.kubernetes.io/enable-cors: "false"
    postgresql:
      tls:
        enabled: false
      imageTag: 11.7
      persistence:
        existingClaim: "" # use default postgresql PVC
  extraEnv: |
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: admin
    - name: KEYCLOAK_IMPORT
      value: /realm/alfresco-realm.json
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
  realm:
    alfresco:
      client:
        redirectUris:
          - "*"
        webOrigins:
          - "*"
      extraClients:
        - clientId: activiti
          enabled: true
          redirectUris:
            - "*"
          webOrigins:
            - "*"
          directAccessGrantsEnabled: true
          implicitFlowEnabled: true
        - clientId: storage-service
          enabled: true
          authorizationServicesEnabled: true
          directAccessGrantsEnabled: true
          secret: 08102f0f-025c-4226-8a3e-674343bff231
        - clientId: activiti-keycloak
          enabled: true
          clientAuthenticatorType: client-secret
          secret: d2b835b5-efdf-4448-8d55-89eaaca9fc96
          bearerOnly: false
          standardFlowEnabled: false
          implicitFlowEnabled: false
          directAccessGrantsEnabled: true
          serviceAccountsEnabled: true
          publicClient: false
          protocol: openid-connect
          fullScopeAllowed: true
      extraRealmRoles:
        - name: ACTIVITI_ADMIN
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_DEVOPS
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_USER
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_MODELER
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_IDENTITY
          description: "user is able to see the identity section"
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
                - query-realms
                - query-clients
                - manage-users
                - manage-authorization
                - manage-realm
                - manage-clients
      extraGroups:
        - name: hr
          realmRoles:
            - ACTIVITI_USER
        - name: sales
          realmRoles:
            - ACTIVITI_USER
        - name: testgroup
        - name: processadmin
          realmRoles:
            - ACTIVITI_ADMIN
      extraUsers:
        - username: superadminuser
          enabled: true
          firstName: "Super Admin"
          lastName: "User"
          email: superadminuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - ACTIVITI_USER
            - ACTIVITI_IDENTITY
            - ACTIVITI_DEVOPS
            - ACTIVITI_ADMIN
            - ACTIVITI_MODELER
            - offline_access
            - uma_authorization
          clientRoles:
            realm-management:
              - manage-users
              - manage-clients
              - manage-authorization
              - manage-events
              - manage-realm
              - create-client
              - impersonation
              - realm-admin
            broker:
              - read-token
            account:
              - manage-account
              - view-profile
        - username: devopsuser
          enabled: true
          firstName: DevOps
          lastName: User
          email: devopsuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_DEVOPS
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: hruser
          enabled: true
          firstName: HR
          lastName: User
          email: hruser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /hr
        - username: processadminuser
          enabled: true
          firstName: "Process Admin"
          lastName: User
          email: processadminuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_ADMIN
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /processadmin
        - username: salesuser
          enabled: true
          firstName: Sales
          lastName: User
          email: salesuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /sales
        - username: testuser
          enabled: true
          firstName: Test
          lastName: User
          email: testuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /testgroup
        - username: testadmin
          enabled: true
          firstName: Test
          lastName: Admin
          email: testadmin@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
            - ACTIVITI_ADMIN
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /testgroup
        - username: identityuser
          enabled: true
          firstName: Identity
          lastName: Admin
          email: identityuser@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_IDENTITY
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: modeler
          enabled: true
          firstName: Modeler
          lastName: User
          email: modeler@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_MODELER
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: modeler-qa
          enabled: true
          firstName: Modeler
          lastName: User
          email: modeler-qa@example.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_MODELER
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: service-account-activiti-keycloak
          enabled: true
          serviceAccountClientId: activiti-keycloak
          clientRoles:
            realm-management:
              - query-realms
              - view-users
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: 11.7
  postgresqlUsername: alfresco
  postgresqlPassword: alfresco
  postgresqlDatabase: postgres
  postgresqlDataDir: /data/pgdata
  persistence:
    mountPath: /data
  postgresqlConfiguration:
    max_connections: 300
    log_min_messages: LOG
  resources:
    requests:
      memory: 1500Mi
    limits:
      memory: 1500Mi
  commonAnnotations:
    application: activiti
alfresco-modeling-service:
  enabled: true
  nameOverride: alfresco-modeling-service
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    path: ""
    subPaths:
      - /modeling-service/?(.*)
      - /dmn-service/?(.*)
      - /script-service/?(.*)
  extraVolumes: |-
    - name: license
      secret:
        secretName: licenseaps
  extraVolumeMounts: |-
    - name: license
      mountPath: "/root/.activiti/enterprise-license/"
      readOnly: true
  image:
    repository: quay.io/alfresco/alfresco-modeling-service
    tag: 7.1.0-M16
    pullPolicy: IfNotPresent
  liquibase:
    enabled: true
  postgresql:
    enabled: true
  db:
    uri: "jdbc:postgresql://{{ .Release.Name }}-{{ .Values.postgresql.name }}:{{ .Values.postgresql.port }}/postgres"
    username: alfresco
    password: alfresco
  probePath: /actuator/health
  rabbitmq:
    enabled: false
  content:
    service:
      path: alfresco
    client:
      id: ""
      secret: ""
  activiti:
    keycloak:
      # alfresco-modeling-service.applications.activiti.keycloak.clientId -- activiti keycloak client id
      clientId: "{{ .Values.global.keycloak.clientId }}"
      # alfresco-modeling-service.applications.activiti.keycloak.clientSecret -- activiti keycloak client secret
      clientSecret: "{{ .Values.global.keycloak.clientSecret }}"
  exampleProjects:
    endpoint: https://alfresco.github.io/apa-templates
    resource: index_7.1.0-M16.json
  extraEnv: |-
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
      value: "*"
    - name: CONTENT_CLIENT_ID
      value: "{{ .Values.content.client.id }}"
    - name: CONTENT_CLIENT_SECRET
      value: "{{ .Values.content.client.secret }}"
    - name: CONTENT_SERVICE_URL
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    - name: CONTENT_SERVICE_PATH
      value: "{{ .Values.content.service.path }}"
    {{- with .Values.activiti.keycloak.clientId }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_ID
      value: "{{ tpl . $ }}"
    {{- end }}
    {{- with .Values.activiti.keycloak.clientSecret }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_SECRET
      value: "{{ tpl . $ }}"
    {{- end }}
    - name: ACT_ALFRESCO_MODELING_TEMPLATES_ENDPOINT
      value: "{{ .Values.exampleProjects.endpoint }}"
    - name: ACT_ALFRESCO_MODELING_TEMPLATES_RESOURCE
      value: "{{ .Values.exampleProjects.resource }}"
  javaOpts:
    xms: 512m
    xmx: 3072m
    other: >-
      -XX:+UnlockExperimentalVMOptions
      -Dsun.zip.disableMemoryMapping=true
      -XX:+UseParallelGC
      -XX:MinHeapFreeRatio=5
      -XX:GCTimeRatio=4
      -XX:AdaptiveSizePolicyWeight=90

alfresco-modeling-app:
  enabled: true
  nameOverride: alfresco-modeling-app
  image:
    repository: quay.io/alfresco/alfresco-modeling-app
    tag: 7.1.0-M16
    pullPolicy: IfNotPresent
  service:
    name: modeling-app
    envType: frontend
  exampleProjects:
    disabled: false
    host: https://alfresco.github.io/apa-templates
    resource: index_7.1.0-M16.json
  env:
    APP_CONFIG_AUTH_TYPE: OAUTH
    APP_CONFIG_ECM_HOST: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'
    APP_CONFIG_DISABLED_EXAMPLE_PROJECTS: "{{ .Values.exampleProjects.disabled }}"
    APP_CONFIG_EXAMPLE_PROJECTS_HOST: "{{ .Values.exampleProjects.host }}"
    APP_CONFIG_EXAMPLE_PROJECTS_RESOURCE: "{{ .Values.exampleProjects.resource }}"
  ingress:
    path: /modeling
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi
alfresco-deployment-service:
  nameOverride: alfresco-deployment-service
  enabled: true
  rabbitmq:
    enabled: false
  image:
    repository: quay.io/alfresco/alfresco-deployment-service
    tag: 7.1.0-M16
    pullPolicy: IfNotPresent
  postgresql:
    enabled: true
  db:
    # use the namespace qualified postgres hostname for apps deployed in different namespaces
    uri: "jdbc:postgresql://{{ .Release.Name }}-{{ .Values.postgresql.name }}.{{ .Release.Namespace }}:{{ .Values.postgresql.port }}/postgres"
    username: alfresco
    password: alfresco
  applications:
    image:
      # alfresco-deployment-service.applications.image.tag -- default tag for all images used in application
      tag: 7.1.0-M16
      # alfresco-deployment-service.applications.image.pullPolicy -- default pull policy for all images used in application
      pullPolicy: IfNotPresent
    maxNumber: 20
      # alfresco-deployment-service.applications.maxNumber -- maximum number of application can be deployed
      # @default -- 20 applications can be deployed by default
    database:
      external: true
    connectors:
      # alfresco-deployment-service.applications.connectors.emailConnector -- In order to apply default account configuration to the email connector, all the variables need to be set. All email connectors in every application in the cluster will share the same account.
      emailConnector:
        # alfresco-deployment-service.applications.connectors.emailConnector.username -- email username
        username: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.password -- email password
        password: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.host -- email host
        host: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.port -- email port
        port: ""
    processStorageService:
      # alfresco-deployment-service.applications.processStorageService.clientSecret -- client secret for process storage
      clientSecret: 08102f0f-025c-4226-8a3e-674343bff231
    activiti:
      keycloak:
        # alfresco-deployment-service.applications.activiti.keycloak.clientId -- activiti keycloak client id
        clientId: "{{ .Values.global.keycloak.clientId }}"
        # alfresco-deployment-service.applications.activiti.keycloak.clientSecret -- activiti keycloak client secret
        clientSecret: "{{ .Values.global.keycloak.clientSecret }}"
    rabbitmq:
      # alfresco-deployment-service.applications.rabbitmq.host -- RabbitMQ host
      host: "{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}"
      # alfresco-deployment-service.applications.rabbitmq.username -- RabbitMQ username
      username: "user"
      # alfresco-deployment-service.applications.rabbitmq.password -- RabbitMQ password
      password: "CHANGEME"
      admin:
        # alfresco-deployment-service.applications.rabbitmq.admin.url -- RabbitMQ admin URL, derived from host if not set
        url: ""
  ingress:
    path: /deployment-service
    enabled: true
  readinessProbe:
    path: '{{ .Values.ingress.path }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ .Values.ingress.path }}/actuator/health/liveness'
  environment:
    # alfresco-deployment-service.environment.apiUrl -- kubernetes API URL, $ kubectl config view -o jsonpath='{.clusters[0].cluster.server}'
    apiUrl: ""
    # alfresco-deployment-service.environment.apiToken -- kubernetes API Token
    # Create a service account alfresco-deployment-service and retrieve its token:
    # $ kubectl create serviceaccount -n kube-system alfresco-deployment-service
    # $ kubectl create clusterrolebinding alfresco-deployment-service-admin-binding --clusterrole cluster-admin --serviceaccount=kube-system:alfresco-deployment-service
    # $ kubectl -n kube-system get secret $(kubectl -n kube-system get serviceaccount alfresco-deployment-service -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode
    apiToken: ""
    # alfresco-deployment-service.environment.namespace -- namespace to copy secrets from to application namespaces
    # @default -- installation namespace
    namespace: "{{ .Release.Namespace }}"
  projectReleaseVolume:
    # alfresco-deployment-service.projectReleaseVolume.storageClass -- storage class for project release volume, set to null spring expression to use default
    storageClass: "#{null}"
    # alfresco-deployment-service.projectReleaseVolume.permission -- permission for project release volume
    permission: ReadWriteMany
  extraVolumes: |-
    - name: config
      configMap:
        name: {{ .Release.Name }}-deployment-config
        defaultMode: 0744
    - name: license
      secret:
        secretName: licenseaps
  extraVolumeMounts: |-
    - name: license
      mountPath: "/root/.activiti/enterprise-license/"
      readOnly: true
  extraEnv: |-
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ .Values.ingress.path }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
      value: "*"
    - name: KEYCLOAK_AUTH_SERVER_URL
      value: '{{ include "common.keycloak-url" . }}'
    - name: DOCKER_REGISTRY_IMAGE_TAG
      value: "{{ .Values.applications.image.tag }}"
    - name: ALFRESCO_DOCKER_REGISTRY_IMAGEPULLPOLICY
      value: "{{ .Values.applications.image.pullPolicy }}"
    - name: CONTENT_SERVICE_BASE_URL
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    - name: CONTENT_SERVICE_ENABLED
      value: "{{ .Values.global.acs.enabled }}"
    {{- with .Values.global.acs.activemq.url }}
    - name: CONTENT_SERVICE_ACTIVEMQ_URL
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.global.acs.activemq.username }}
    - name: CONTENT_SERVICE_ACTIVEMQ_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.global.acs.activemq.password }}
    - name: CONTENT_SERVICE_ACTIVEMQ_PASSWORD
      value: "{{ . }}"
    {{- end }}
    - name: MODELING_URL
      value: '{{ include "common.gateway-url" . }}/modeling-service'
    - name: ENVIRONMENT_HOST_URL
      value: '{{ include "common.gateway-url" . }}'
    - name: ENVIRONMENT_API_URL
      value: "{{ .Values.environment.apiUrl }}"
    - name: ENVIRONMENT_API_TOKEN
      value: "{{ .Values.environment.apiToken }}"
    - name: ENVIRONMENT_NAMESPACE
      value: "{{ tpl .Values.environment.namespace . }}"
    - name: PROJECT_RELEASE_VOLUME_STORAGE_CLASS
      value: "{{ .Values.projectReleaseVolume.storageClass }}"
    - name: PROJECT_RELEASE_VOLUME_PERMISSION
      value: "{{ .Values.projectReleaseVolume.permission }}"
    - name: APPLICATIONS_DATABASE_EXTERNAL
      value: "{{ .Values.applications.database.external }}"
    {{- with .Values.applications.connectors.emailConnector.username }}
    - name: CONNECTOR_EMAILCONNECTOR_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.password }}
    - name: CONNECTOR_EMAILCONNECTOR_PASSWORD
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.host }}
    - name: CONNECTOR_EMAILCONNECTOR_HOST
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.port }}
    - name: CONNECTOR_EMAILCONNECTOR_PORT
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.maxNumber }}
    - name: APPLICATIONS_MAXNUMBER
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.processStorageService.clientSecret }}
    - name: PROCESS_STORAGE_SERVICE_CLIENTSECRET
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.activiti.keycloak.clientId }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_ID
      value: "{{ tpl . $ }}"
    {{- end }}
    {{- with .Values.applications.activiti.keycloak.clientSecret }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_SECRET
      value: "{{ tpl . $ }}"
    {{- end }}
    {{- if .Values.applications.rabbitmq.host }}
    - name: APPLICATIONS_RABBITMQ_HOST
      value: "{{ tpl .Values.applications.rabbitmq.host . }}"
    {{- end }}
    {{- with .Values.applications.rabbitmq.username }}
    - name: APPLICATIONS_RABBITMQ_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.rabbitmq.password }}
    - name: APPLICATIONS_RABBITMQ_PASSWORD
      value: "{{ . }}"
    {{- end }}
    {{- if .Values.applications.rabbitmq.admin.url }}
    - name: APPLICATIONS_RABBITMQ_ADMIN_URL
      value: "{{ tpl .Values.applications.rabbitmq.admin.url . }}"
    {{- end }}
    - name: ATS_TRANSFORMER_TIKA_URL
      value: "http://tika.{{ .Release.Namespace }}/transform"
    - name: PROCESS_UI_URL
      value: '{{ include "common.gateway-url" . }}'
alfresco-admin-app:
  enabled: true
  nameOverride: alfresco-admin-app
  image:
    repository: quay.io/alfresco/alfresco-admin-app
    tag: 7.1.0-M16
    pullPolicy: IfNotPresent
  service:
    name: admin-app
    envType: frontend
  applications:
    allowCustomResources: true
  env:
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_AUTH_TYPE: "OAUTH"
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'
  extraEnv: |-
    - name: APP_ALLOW_CUSTOM_RESOURCES
      value: "{{ .Values.applications.allowCustomResources }}"
    {{- if .Values.global.acs.enabled }}
    - name: APP_CONFIG_ECM_HOST
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    {{- else }}
    - name: APP_CONFIG_PROVIDER
      value: BPM
    {{- end }}
  ingress:
    path: /admin
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi
rabbitmq:
  enabled: true
  extraPlugins: ""
  livenessProbe:
    enabled: false
  customLivenessProbe:
    exec:
      command:
        - rabbitmq-diagnostics
        - status
    initialDelaySeconds: 60
    timeoutSeconds: 15
    periodSeconds: 60
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - rabbitmq-diagnostics
        - ping
    initialDelaySeconds: 20
    periodSeconds: 60
  persistence:
    storageClass:
    accessMode: ReadWriteOnce
  auth:
    username: user
    password: CHANGEME
    erlangCookie: ylY79lOdNUWsJEwAGdVQnhjSazV4QZKO=
  resources:
    requests:
      memory: 1500Mi
    limits:
      memory: 1500Mi
setup-acs-script-job:
  enabled: true
  loadTestData: true
  image:
    repository: bitnami/minideb-extras
    tag: stretch
alfresco-tika-service:
  nameOverride: alfresco-tika-service
  enabled: true
  image:
    repository: alfresco/alfresco-tika
    tag: 2.5.3
  service:
    name: tika
    internalPort: 8090
  ingress:
    enabled: false
  readinessProbe:
    path: /ready
  livenessProbe:
    path: /live
  resources:
    requests:
      memory: 1000Mi
    limits:
      memory: 1000Mi
  javaOpts:
    other: >-
      -XX:MinRAMPercentage=50
      -XX:MaxRAMPercentage=80
