# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# README documentation generated automatically from this file via https://github.com/norwoodj/helm-docs

# global -- for common values see https://github.com/Activiti/activiti-cloud-common-chart/blob/master/charts/common/README.md
global:

  # global.registryPullSecrets -- Configure pull secrets for all deployments
  registryPullSecrets:
    - quay-registry-secret

  keycloak:
    # global.keycloak.host -- Configure Keycloak host template, i.e. "{{ .Release.Namespace }}.{{ .Values.global.gateway.domain }}"
    host: '{{ template "common.gateway-host" . }}'
    # global.keycloak.url -- Set full url to configure external Keycloak, https://keycloak.mydomain.com/auth
    url: ""
    # global.keycloak.realm -- Configure Keycloak realm
    realm: alfresco
    # global.keycloak.resource -- Configure Keycloak resource
    resource: alfresco

  gateway:
    # global.gateway.host -- Set to configure single host domain name for all services, i.e. "{{ .Release.Namespace }}.{{ template "common.gateway-domain" . }}"
    host: '{{ template "common.gateway-domain" . }}'
    # global.gateway.http -- Set to false enables HTTPS configuration on all urls
    http: false
    # global.gateway.tlsacme -- Set to enable automatic TLS for ingress if https is enabled
    tlsacme: false
    # global.gateway.domain -- Set to configure gateway domain template, i.e. {{ .Release.Namespace }}.1.3.4.5.nip.io
    # $ helm upgrade aae . --install --set global.gateway.domain=1.2.3.4.nip.io
    domain: ""
    # global.gateway.annotations -- Configure global annotations for all service ingresses
    annotations: {}

  acs:
    # global.acs.enabled -- enable support for ACS
    enabled: false
    # global.acs.host -- host for content services
    host: '{{ template "common.gateway-host" . }}'
    # global.acs.url -- set full url to configure external ACS, https://acs.mydomain.com without /alfresco
    url: ""
    # global.acs.admin -- admin credentials to setup required users/groups/acl on ACS
    admin:
      # global.acs.admin.username -- ACS admin username
      username: ""
      # global.acs.admin.password -- ACS admin password
      password: ""
    activemq:
      # global.acs.activemq.url -- ACS ActiveMQ URL for events
      url: ""
      # global.acs.activemq.username -- ACS ActiveMQ username
      username: ""
      # global.acs.activemq.username -- ACS ActiveMQ password
      password: ""

# set to false to disable custom alfresco-identity-service ingress with hostname support
alfresco-identity-service:
  enabled: true
  ingress:
    enabled: false
    common:
      enabled: true
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "false" # disable NGINX CORS as it's managed by Identity Service
  keycloak:
    ingress:
      enabled: false
    postgresql:
      imageTag: 11.7
      persistence:
        existingClaim: "" # use default postgresql PVC
  realm:
    alfresco:
      client:
        redirectUris:
          - "*"
        webOrigins:
          - "*"
      extraClients:
        - clientId: activiti
          enabled: true
          redirectUris:
            - "*"
          webOrigins:
            - "*"
          directAccessGrantsEnabled: true
          implicitFlowEnabled: true
        - clientId: storage-service
          enabled: true
          authorizationServicesEnabled: true
          directAccessGrantsEnabled: true
          secret: 08102f0f-025c-4226-8a3e-674343bff231
      extraRealmRoles:
        - name: ACTIVITI_ADMIN
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_DEVOPS
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_USER
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_MODELER
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
        - name: ACTIVITI_IDENTITY
          description: "user is able to see the identity section"
          composites:
            client:
              realm-management:
                - view-users
                - view-clients
                - query-realms
                - query-clients
                - manage-users
                - manage-authorization
                - manage-realm
                - manage-clients
      extraGroups:
        - name: hr
          realmRoles:
            - ACTIVITI_USER
        - name: sales
          realmRoles:
            - ACTIVITI_USER
        - name: testgroup
        - name: processadmin
          realmRoles:
            - ACTIVITI_ADMIN
      extraUsers:
        - username: client
          enabled: true
          firstName: client
          lastName: client
          email: client@test.com
          credentials:
            - type: password
              value: client
          realmRoles:
            - ACTIVITI_USER
            - offline_access
            - uma_authorization
          clientRoles:
            realm-management:
              - manage-users
              - manage-clients
              - manage-authorization
              - manage-events
              - manage-realm
              - create-client
              - impersonation
              - realm-admin
            broker:
              - read-token
            account:
              - manage-account
              - view-profile
        - username: superadminuser
          enabled: true
          firstName: "Super Admin"
          lastName: "User"
          email: superadminuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - ACTIVITI_USER
            - ACTIVITI_IDENTITY
            - ACTIVITI_DEVOPS
            - ACTIVITI_ADMIN
            - ACTIVITI_MODELER
            - offline_access
            - uma_authorization
          clientRoles:
            realm-management:
              - manage-users
              - manage-clients
              - manage-authorization
              - manage-events
              - manage-realm
              - create-client
              - impersonation
              - realm-admin
            broker:
              - read-token
            account:
              - manage-account
              - view-profile
        - username: devopsuser
          enabled: true
          firstName: DevOps
          lastName: User
          email: devopsuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_DEVOPS
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: hruser
          enabled: true
          firstName: HR
          lastName: User
          email: hruser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /hr
        - username: processadminuser
          enabled: true
          firstName: "Process Admin"
          lastName: User
          email: processadminuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_ADMIN
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /processadmin
        - username: salesuser
          enabled: true
          firstName: Sales
          lastName: User
          email: salesuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /sales
        - username: testuser
          enabled: true
          firstName: Test
          lastName: User
          email: testuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /testgroup
        - username: testadmin
          enabled: true
          firstName: Test
          lastName: Admin
          email: testadmin@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_USER
            - ACTIVITI_ADMIN
          clientRoles:
            account:
              - manage-account
              - view-profile
          groups:
            - /testgroup
        - username: identityuser
          enabled: true
          firstName: Identity
          lastName: Admin
          email: identityuser@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_IDENTITY
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: modeler
          enabled: true
          firstName: Modeler
          lastName: User
          email: modeler@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_MODELER
          clientRoles:
            account:
              - manage-account
              - view-profile
        - username: modeler-qa
          enabled: true
          firstName: Modeler
          lastName: User
          email: modeler-qa@test.com
          credentials:
            - type: password
              value: password
          realmRoles:
            - offline_access
            - uma_authorization
            - ACTIVITI_MODELER
          clientRoles:
            account:
              - manage-account
              - view-profile

postgresql:
  enabled: true
  image:
    repository: postgres
    tag: 11.7
  postgresqlUsername: alfresco
  postgresqlPassword: alfresco
  postgresqlDatabase: postgres
  postgresqlDataDir: /data/pgdata
  persistence:
    mountPath: /data
  postgresqlConfiguration:
    max_connections: 300
    log_min_messages: LOG
  resources:
    requests:
      memory: 1500Mi
    limits:
      memory: 1500Mi

alfresco-modeling-service:
  nameOverride: alfresco-modeling-service
  enabled: true
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    enabled: true
    path: ""
    subPaths:
      - /modeling-service/?(.*)
      - /dmn-service/?(.*)
      - /script-service/?(.*)
  extraVolumes: |-
    - name: license
      secret:
        secretName: licenseaps
  extraVolumeMounts: |-
    - name: license
      mountPath: "/root/.activiti/enterprise-license/"
      readOnly: true
  image:
    repository: quay.io/alfresco/alfresco-modeling-service
    tag: 7.1.0-A13
    pullPolicy: IfNotPresent
  postgres:
    enabled: true
    name: postgresql
    username: alfresco
    password: alfresco
  probePath: /actuator/health
  rabbitmq:
    enabled: false
  content:
    service:
      path: alfresco
    client:
      id: ""
      secret: ""
  activiti:
    keycloak:
      # alfresco-modeling-service.activiti.keycloak.clientPassword -- activiti keycloak client password
      clientPassword: client
  extraEnv: |-
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
      value: "*"
    - name: CONTENT_CLIENT_ID
      value: "{{ .Values.content.client.id }}"
    - name: CONTENT_CLIENT_SECRET
      value: "{{ .Values.content.client.secret }}"
    - name: CONTENT_SERVICE_URL
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    - name: CONTENT_SERVICE_PATH
      value: "{{ .Values.content.service.path }}"
    {{- with .Values.activiti.keycloak.clientPassword }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_PASSWORD
      value: "{{ . }}"
    {{- end }}

alfresco-modeling-app:
  nameOverride: alfresco-modeling-app
  enabled: true
  ingress:
    path: /modeling
  image:
    repository: quay.io/alfresco/alfresco-modeling-app
    tag: 7.1.0-A13
    pullPolicy: IfNotPresent
  env:
    APP_CONFIG_AUTH_TYPE: OAUTH
    APP_CONFIG_ECM_HOST: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'

alfresco-deployment-service:
  nameOverride: alfresco-deployment-service
  enabled: true
  rabbitmq:
    enabled: false
  image:
    repository: quay.io/alfresco/alfresco-deployment-service
    tag: 7.1.0-A13
    pullPolicy: IfNotPresent
  postgres:
    # workaround to use the namespace qualified postgres hostname
    enabled: false
    name: postgresql
    username: alfresco
    password: alfresco
  applications:
    image:
      # alfresco-deployment-service.applications.image.tag -- default tag for all images used in application
      tag: 7.1.0-A13
      # alfresco-deployment-service.applications.image.pullPolicy -- default pull policy for all images used in application
      pullPolicy: IfNotPresent
    maxNumber: 20
      # alfresco-deployment-service.applications.maxNumber -- maximum number of application can be deployed
      # @default -- 20 applications can be deployed by default
    database:
      external: true
    connectors:
      # alfresco-deployment-service.applications.connectors.emailConnector -- In order to apply default account configuration to the email connector, all the variables need to be set. All email connectors in every application in the cluster will share the same account.
      emailConnector:
        # alfresco-deployment-service.applications.connectors.emailConnector.username -- email username
        username: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.password -- email password
        password: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.host -- email host
        host: ""
        # alfresco-deployment-service.applications.connectors.emailConnector.port -- email port
        port: ""
    processStorageService:
      # alfresco-deployment-service.applications.processStorageService.clientSecret -- client secret for process storage
      clientSecret: 08102f0f-025c-4226-8a3e-674343bff231
    activiti:
      keycloak:
        # alfresco-deployment-service.applications.activiti.keycloak.clientPassword -- activiti keycloak client password
        clientPassword: client
    rabbitmq:
      # alfresco-deployment-service.applications.rabbitmq.host -- RabbitMQ host
      host: "{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}"
      # alfresco-deployment-service.applications.rabbitmq.username -- RabbitMQ username
      username: "user"
      # alfresco-deployment-service.applications.rabbitmq.password -- RabbitMQ password
      password: "CHANGEME"
      admin:
        # alfresco-deployment-service.applications.rabbitmq.admin.url -- RabbitMQ admin URL, derived from host if not set
        url: ""
  ingress:
    path: /deployment-service
    enabled: true
  probePath: "{{ .Values.ingress.path }}/actuator/health"
  environment:
    # alfresco-deployment-service.environment.apiUrl -- kubernetes API URL, $ kubectl config view -o jsonpath='{.clusters[0].cluster.server}'
    apiUrl: ""
    # alfresco-deployment-service.environment.apiToken -- kubernetes API Token
    # Create a service account alfresco-deployment-service and retrieve its token:
    # $ kubectl create serviceaccount -n kube-system alfresco-deployment-service
    # $ kubectl create clusterrolebinding alfresco-deployment-service-admin-binding --clusterrole cluster-admin --serviceaccount=kube-system:alfresco-deployment-service
    # $ kubectl -n kube-system get secret $(kubectl -n kube-system get serviceaccount alfresco-deployment-service -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode
    apiToken: ""
    # alfresco-deployment-service.environment.namespace -- namespace to copy secrets from to application namespaces
    # @default -- installation namespace
    namespace: "{{ .Release.Namespace }}"
  projectReleaseVolume:
    # alfresco-deployment-service.projectReleaseVolume.storageClass -- storage class for project release volume, set to null spring expression to use default
    storageClass: "#{null}"
    # alfresco-deployment-service.projectReleaseVolume.permission -- permission for project release volume
    permission: ReadWriteMany
  extraVolumes: |-
    - name: config
      configMap:
        name: {{ .Release.Name }}-deployment-config
        defaultMode: 0744
    - name: license
      secret:
        secretName: licenseaps
  extraVolumeMounts: |-
    - name: license
      mountPath: "/root/.activiti/enterprise-license/"
      readOnly: true
  extraInitContainers: |-
    {{- if not .Values.db.uri }}
    - name: wait-for-postgresql
      image: {{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}
      imagePullPolicy: {{ .Values.init.image.pullPolicy }}
      command:
        - sh
        - -c
        - |-
          until printf "." && nc -z -w 2 {{ .Release.Name }}-{{ .Values.postgres.name }}.{{ .Release.Namespace }} {{ .Values.postgres.port }}; do
            sleep 2;
          done;
          echo 'PostgreSQL OK ✓'
    {{- end }}
  extraEnv: |-
    {{- if not .Values.db.uri }}
    - name: SPRING_DATASOURCE_URL
      value: "jdbc:postgresql://{{ .Release.Name }}-{{ .Values.postgres.name }}.{{ .Release.Namespace }}:{{ .Values.postgres.port }}/postgres"
    - name: SPRING_DATASOURCE_USERNAME
      value: "{{ .Values.postgres.username }}"
    - name: SPRING_DATASOURCE_PASSWORD
      value: "{{ .Values.postgres.password }}"
    {{- end }}
    - name: SERVER_PORT
      value: "8080"
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ .Values.ingress.path }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
      value: "*"
    - name: KEYCLOAK_AUTH_SERVER_URL
      value: '{{ include "common.keycloak-url" . }}'
    - name: DOCKER_REGISTRY_IMAGE_TAG
      value: "{{ .Values.applications.image.tag }}"
    - name: ALFRESCO_DOCKER_REGISTRY_IMAGEPULLPOLICY
      value: "{{ .Values.applications.image.pullPolicy }}"
    - name: CONTENT_SERVICE_BASE_URL
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    - name: CONTENT_SERVICE_ENABLED
      value: "{{ .Values.global.acs.enabled }}"
    {{- with .Values.global.acs.activemq.url }}
    - name: CONTENT_SERVICE_ACTIVEMQ_URL
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.global.acs.activemq.username }}
    - name: CONTENT_SERVICE_ACTIVEMQ_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.global.acs.activemq.password }}
    - name: CONTENT_SERVICE_ACTIVEMQ_PASSWORD
      value: "{{ . }}"
    {{- end }}
    - name: MODELING_URL
      value: '{{ include "common.gateway-url" . }}/modeling-service'
    - name: ENVIRONMENT_HOST_URL
      value: '{{ include "common.gateway-url" . }}'
    - name: ENVIRONMENT_API_URL
      value: "{{ .Values.environment.apiUrl }}"
    - name: ENVIRONMENT_API_TOKEN
      value: "{{ .Values.environment.apiToken }}"
    - name: ENVIRONMENT_NAMESPACE
      value: "{{ tpl .Values.environment.namespace . }}"
    - name: PROJECT_RELEASE_VOLUME_STORAGE_CLASS
      value: "{{ .Values.projectReleaseVolume.storageClass }}"
    - name: PROJECT_RELEASE_VOLUME_PERMISSION
      value: "{{ .Values.projectReleaseVolume.permission }}"
    - name: APPLICATIONS_DATABASE_EXTERNAL
      value: "{{ .Values.applications.database.external }}"
    {{- with .Values.applications.connectors.emailConnector.username }}
    - name: CONNECTOR_EMAILCONNECTOR_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.password }}
    - name: CONNECTOR_EMAILCONNECTOR_PASSWORD
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.host }}
    - name: CONNECTOR_EMAILCONNECTOR_HOST
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.connectors.emailConnector.port }}
    - name: CONNECTOR_EMAILCONNECTOR_PORT
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.maxNumber }}
    - name: APPLICATIONS_MAXNUMBER
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.processStorageService.clientSecret }}
    - name: PROCESS_STORAGE_SERVICE_CLIENTSECRET
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.activiti.keycloak.clientPassword }}
    - name: ACTIVITI_KEYCLOAK_CLIENT_PASSWORD
      value: "{{ . }}"
    {{- end }}
    {{- if .Values.applications.rabbitmq.host }}
    - name: APPLICATIONS_RABBITMQ_HOST
      value: "{{ tpl .Values.applications.rabbitmq.host . }}"
    {{- end }}
    {{- with .Values.applications.rabbitmq.username }}
    - name: APPLICATIONS_RABBITMQ_USERNAME
      value: "{{ . }}"
    {{- end }}
    {{- with .Values.applications.rabbitmq.password }}
    - name: APPLICATIONS_RABBITMQ_PASSWORD
      value: "{{ . }}"
    {{- end }}
    {{- if .Values.applications.rabbitmq.admin.url }}
    - name: APPLICATIONS_RABBITMQ_ADMIN_URL
      value: "{{ tpl .Values.applications.rabbitmq.admin.url . }}"
    {{- end }}

alfresco-admin-app:
  nameOverride: alfresco-admin-app
  enabled: true
  ingress:
    hostName:
    path: /admin
  image:
    repository: quay.io/alfresco/alfresco-admin-app
    tag: 7.1.0-A13
    pullPolicy: IfNotPresent
  applications:
    allowCustomResources: true
  env:
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
    APP_CONFIG_AUTH_TYPE: "OAUTH"
    APP_CONFIG_IDENTITY_HOST: '{{ include "common.keycloak-url" . }}/admin/realms/{{ include "common.keycloak-realm" . }}'
  extraEnv: |-
    - name: APP_ALLOW_CUSTOM_RESOURCES
      value: "{{ .Values.applications.allowCustomResources }}"
    {{- if .Values.global.acs.enabled }}
    - name: APP_CONFIG_ECM_HOST
      value: '{{ template "alfresco-process-infrastructure.acs-url" . }}'
    {{- end }}

rabbitmq:
  enabled: true
  extraPlugins: ""
  livenessProbe:
    enabled: false
  customLivenessProbe:
    exec:
      command:
        - rabbitmq-diagnostics
        - status
    initialDelaySeconds: 60
    timeoutSeconds: 15
    periodSeconds: 60
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - rabbitmq-diagnostics
        - ping
    initialDelaySeconds: 20
    periodSeconds: 60
  persistence:
    storageClass:
    accessMode: ReadWriteOnce
  auth:
    username: user
    password: CHANGEME
    erlangCookie: ylY79lOdNUWsJEwAGdVQnhjSazV4QZKO=
  resources:
    requests:
      memory: 1500Mi
    limits:
      memory: 1500Mi

setup-acs-script-job:
  enabled: true
  loadTestData: true
  image:
    repository: bitnami/minideb-extras
    tag: stretch
